{"mappings":"gRAEA,IAAIA,E,iVCoBJ,IAAAC,EACAC,E,iFArBA,IAAIC,EAAU,CAAC,EAoBfF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,GAElC,EAaAL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,CACT,C,ICpBAE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,iGFiBzD,IAAIC,EAA2B,CAC3BC,aAAa,EACbC,SAAS,EACTC,OAAQ,M,WGlBZC,EAAiB,SAAUC,EAAWC,EAAQC,GAC5C,GAAID,IAAWE,KAAKC,SAASH,OAG3B,OAAOD,EAGP,IAAIK,EAASH,EAAQ,UAAYT,KAAKa,UAAUN,GAAa,IAAM,iBAAmBP,KAAKa,UAAUN,GAAa,KAClH,OAAOO,IAAIC,gBAAgB,IAAIC,KAAK,CAACJ,GAAS,CAC5CK,KAAM,2BAGZ,ECbA,IAAIC,EAAA,IAAAJ,IAA0BhB,EAAA,SAAAqB,QAA6C,qBAAAC,KAC3EC,EAAiBf,EAAUY,EAAII,WAAYJ,EAAIV,QAAQ,GJqCvD,IAAIe,EAAa,IAhBjB,WACI,IAAIlB,EAAS,IAAImB,OAAAH,GACbI,EAA6B,CAAEC,UAAW,cAE9C,OAAO,IAAIC,SAAQ,CAACR,EAASS,KACzBvB,EAAOwB,QAAUD,EACjBvB,EAAOyB,eAAiBF,EACxBvB,EAAO0B,UAAaC,IACc,eAA1BA,EAAQC,KAAKP,YACbrB,EAAO0B,UAAY,WAAc,EACjCZ,EAAQd,GACZ,EAEJA,EAAO6B,YAAYT,EAAA,GAE3B,CACuBU,GAA0BC,MAAK/B,IAClDA,EAAOgC,iBAAiB,SAAUC,GAAMC,EAAQ,IAAI1C,MAAMyC,EAAEN,YAC5D3B,EAAOgC,iBAAiB,UAAWG,GACnCtC,EAAc,CACVC,aAAa,EACbC,SAAS,E,OACTC,EACJ,IAGAoC,EAAYC,IAAD,EACXH,EAAmCD,IAAD,EAEtC,SAASE,EAAcR,GACnB,GAA8B,eAA1BA,EAAQC,KAAKP,UACb,MAAM,IAAI7B,MAAM,yBACiB,QAA1BmC,EAAQC,KAAKP,UACpBxC,EAAmB8C,EAAQC,KAAKU,SAAUX,EAAQC,KAAKW,cACtB,SAA1BZ,EAAQC,KAAKP,UACpBa,EAAQP,EAAQC,KAAKY,OACY,UAA1Bb,EAAQC,KAAKP,YACpBoB,QAAQC,QAAQ,SAChB7C,EAAYE,SAAU,EACtBqC,EAAST,EAAQC,KAAKS,OAE9B,CAIO,SAASM,EAAMC,GAClB,IAAK/C,EAAYC,YAEb,OADA2C,QAAQI,KAAK,4CACNvB,QAAQR,aAAQgC,GAG3B,GAAIjD,EAAYE,QAIZ,OAHA0C,QAAQI,KAAK,sCACbJ,QAAQC,QAAQ,SAChB7C,EAAYG,OAAO+C,YACZ7B,IAAaa,MAAK,IACdY,EAAMC,KAIrBH,QAAQO,KAAK,SACbnD,EAAYE,SAAU,EACtB,IAAI4B,EAAyB,CACzBN,UAAW,O,OACXuB,GAIJ,OAFA/C,EAAYG,OAAO6B,YAAYF,GAExB,IAAIL,SAAQ,CAACR,EAASS,KACzBa,EAAWtB,EACXoB,EAAUX,CAAA,GAElB,CA7BAL,IKlEA,IAAI+B,EAAoBC,SAASC,eAAe,qBAC5CC,EAAoBC,OAAOC,WAAW,gCAEtCC,EAAuB,QAEvBC,EAAiB,aACjBC,EAAkB,cAElBC,EAAeC,aAAaC,QAAQL,GACpB,QAAhBG,EACAR,SAASW,KAAKC,UAAUC,OAAOP,GACR,SAAhBE,EACPR,SAASW,KAAKC,UAAUC,OAAON,GAE/BC,EAAeN,EAAkBY,QAAU,OAAS,QAGxDf,EAAkBgB,YAAc,UAAUP,IAE1CT,EAAkBjB,iBAAiB,SAAS,KACxC,IAAIkC,EACAd,EAAkBY,SAClBd,SAASW,KAAKC,UAAUC,OAAON,GAC/BS,EAAQhB,SAASW,KAAKC,UAAUK,SAASV,GAAmB,QAAU,SAEtEP,SAASW,KAAKC,UAAUC,OAAOP,GAC/BU,EAAQhB,SAASW,KAAKC,UAAUK,SAASX,GAAkB,OAAS,SAExEG,aAAaS,QAAQb,EAAsBW,GAC3CjB,EAAkBgB,YAAc,UAAUC,GAAO,ICzBrD,IAAIG,EAAWnB,SAASC,eAAe,YACnCmB,EAAapB,SAASC,eAAe,cACrCoB,EAAmBrB,SAASC,eAAe,oBAC3CqB,EAAetB,SAASC,eAAe,gBACvCsB,EAAevB,SAASC,eAAe,gBAEvCuB,EAAiBxB,SAASC,eAAe,aACzCwB,EAAkBzB,SAASC,eAAe,cAC1CyB,EAAmB1B,SAASC,eAAe,eAC3C0B,EAA4B3B,SAASC,eAAe,wBAC9BD,SAASC,eAAe,kBAElDuB,EAAe1C,iBAAiB,YAAaC,IAC3B,UAAVA,EAAE6C,KAAmB7C,EAAE8C,UACvB9C,EAAE+C,iBACFX,EAASY,QACb,IAGJ,IAAIC,EAAeC,GAAoBZ,EAAiBT,UAAUC,OAAO,YAAaoB,GAuCtF,SAASC,EAAeC,EAAgBC,GACpC,IAAIC,EAAKF,EAAS,IAEdG,GADJH,GAAUA,EAASE,GAAM,KACL,GAEhBE,GADJJ,GAAUA,EAASG,GAAQ,IACP,GAChBE,GAAOL,EAASI,GAAQ,GAExBE,EAAM,GAAGH,EAAKvE,WAAW2E,SAAS,EAAG,QAAQL,EAAGtE,WAAW2E,SAAS,EAAG,OAQ3E,OAPIN,GAAgC,GAARG,KACxBE,EAAM,GAAGF,EAAKxE,WAAW2E,SAAS,EAAG,QAAQD,KAEtC,GAAPD,IACAC,EAAM,GAAGD,EAAIzE,WAAW2E,SAAS,EAAG,QAAQD,KAGzCA,CACX,CN3EI9G,EMkDW,CAACyD,EAAUC,KACtB,IAAIsD,EAAaC,OAAOnB,EAAgBoB,OAEpCC,EAhCR,SAA0B1D,GACtB,IAAI2D,EAAS/C,SAASgD,cAAc,QACpCD,EAAOhC,YAAc,GAAGmB,EAA+B,GAAhB9C,EAASU,MAAW,OAAUV,EAASU,aAC9E,IAAImD,EAAUjD,SAASgD,cAAc,QACrCC,EAAQlC,YAAc3B,EAAS8D,MAAMC,KAAK,MAE1C,IAAIL,EAAK9C,SAASgD,cAAc,MAIhC,OAHAF,EAAGM,UAAY,cACfN,EAAGO,gBAAgBN,EAAQ,IAAKE,GAEzBH,CACX,CAqBaQ,CAAiBlE,GAZ9B,IAAuBmE,EAAiBC,EAAgBC,EAAhBD,EAaVV,GAb0BW,EAatBpE,KAbXkE,EAaLnC,GAZMsC,kBAChBH,EAAOI,YAAYH,GAEnBpC,EAAWwC,aAAaJ,EAAOD,EAAOM,SAASJ,IAVvD,SAA0BK,EAAkB3H,GACxC,KAAO2H,EAAQJ,kBAAoBvH,GAC/B2H,EAAQC,YAAYD,EAAQE,UAEpC,CAgBIC,CAAiB7C,EAAYuB,EAAA,EAsBjCxB,EAASrC,iBAAiB,SAAS,KAC/BkD,GAAY,GAEZZ,EAAWiC,kBACX9B,EAAaR,YAAc,GAC3BO,EAAaP,YAAc,GAE3B,IAAImD,EAAQ1C,EAAeqB,MACvBsB,EAAevB,OAAOnB,EAAgBoB,OACtCuB,EAAyC,KAA3B1C,EAAiBmB,MAAeD,OAAOlB,EAAiBmB,YAASjD,EAC/EyE,EAAuB1C,EAA0B2C,QAIjDC,EAAQC,KAAKC,MACjBhF,EAAM,C,MACFyE,E,aACAC,E,YACAC,E,qBACAC,E,eAPiB,MAUhBxF,MAAKM,IACF,IAAIuF,EAAMF,KAAKC,MAEf,GAAItF,EAAO,CACP,IAAIwF,EAAM,GAAGxF,EAAMyF,8BAA8BzF,EAAM0F,6CAA6C1F,EAAM2F,gCAAgC5C,EAAewC,EAAMH,GAAO,MACtKhD,EAAaR,YAAc4D,CAC/B,MACIpD,EAAaR,YAAc,gDAGlCgE,OAAOzF,IACJgC,EAAaP,YAAc,UAAUzB,EAAMb,UAC3Cc,QAAQD,MAAMA,EAAA,IAEjB0F,SAAQ,KACLhD,GAAY,EAAK,GACrB","sources":["src/solver.ts","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-b51530f6b26c46b2.js","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-5eb9030c9bd66c63.js","src/theme.ts","src/index.ts"],"sourcesContent":["import type { Params, Solution, Stats, WorkerRequest, WorkerResponse } from \"./worker\";\n\nlet onSolutionCallback: (solution: Solution, updatedIndex: number) => void;\nexport function setOnSolutions(onSolution: (solution: Solution, updatedIndex: number) => void) {\n    onSolutionCallback = onSolution;\n}\n\ntype WorkerState = {\n    initialized: false,\n    running: false,\n    worker: null,\n} | {\n    initialized: true,\n    running: boolean,\n    worker: Worker,\n};\n\nlet workerState: WorkerState = {\n    initialized: false,\n    running: false,\n    worker: null,\n};\n\nfunction createInitializedWorker(): Promise<Worker> {\n    let worker = new Worker(new URL('worker.ts', import.meta.url), { type: \"module\" });\n    let initMessage: WorkerRequest = { eventType: \"INITIALIZE\" };\n\n    return new Promise((resolve, reject) => {\n        worker.onerror = reject;\n        worker.onmessageerror = reject;\n        worker.onmessage = (message: MessageEvent<WorkerResponse>) => {\n            if (message.data.eventType == \"INITIALIZED\") {\n                worker.onmessage = function () { };\n                resolve(worker);\n            }\n        };\n        worker.postMessage(initMessage);\n    });\n}\nlet loadWorker = () => createInitializedWorker().then(worker => {\n    worker.addEventListener(\"error\", (e) => onError(new Error(e.message)));\n    worker.addEventListener(\"message\", workerHandler);\n    workerState = {\n        initialized: true,\n        running: false,\n        worker,\n    };\n});\n\nlet onFinish = (stats: Stats) => { };\nlet onError: (error: Error) => void = (e) => { };\n\nfunction workerHandler(message: MessageEvent<WorkerResponse>) {\n    if (message.data.eventType == \"INITIALIZED\") {\n        throw new Error(\"double initialization\");\n    } else if (message.data.eventType == \"EMIT\") {\n        onSolutionCallback(message.data.solution, message.data.updatedIndex);\n    } else if (message.data.eventType == \"ERROR\") {\n        onError(message.data.error);\n    } else if (message.data.eventType == \"FINISH\") {\n        console.timeEnd(\"solve\");\n        workerState.running = false;\n        onFinish(message.data.stats);\n    }\n}\n\nloadWorker();\n\nexport function solve(params: Params): Promise<Stats | undefined> {\n    if (!workerState.initialized) {\n        console.warn(\"attempted to solve before initialization\");\n        return Promise.resolve(undefined);\n    }\n\n    if (workerState.running) {\n        console.warn(\"terminating worker for new request\");\n        console.timeEnd(\"solve\");\n        workerState.worker.terminate();\n        return loadWorker().then(() => {\n            return solve(params);\n        });\n    }\n\n    console.time(\"solve\");\n    workerState.running = true;\n    let message: WorkerRequest = {\n        eventType: \"CALL\",\n        params,\n    };\n    workerState.worker.postMessage(message);\n\n    return new Promise((resolve, reject) => {\n        onFinish = resolve;\n        onError = reject;\n    });\n}\n","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1Gxa9\\\":\\\"index.8ccc26c3.js\\\",\\\"eiVB1\\\":\\\"worker.24bca051.js\\\"}\"));","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"eiVB1\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);","let themeToggleButton = document.getElementById(\"themeToggleButton\")!;\nlet prefersDarkScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\nlet localStorageKeyTheme = \"theme\";\n\nlet darkThemeClass = \"dark-theme\";\nlet lightThemeClass = \"light-theme\";\n\nlet currentTheme = localStorage.getItem(localStorageKeyTheme);\nif (currentTheme == \"dark\") {\n    document.body.classList.toggle(darkThemeClass);\n} else if (currentTheme == \"light\") {\n    document.body.classList.toggle(lightThemeClass);\n} else {\n    currentTheme = prefersDarkScheme.matches ? \"dark\" : \"light\";\n}\n\nthemeToggleButton.textContent = `Theme: ${currentTheme}`;\n\nthemeToggleButton.addEventListener(\"click\", () => {\n    let theme: string;\n    if (prefersDarkScheme.matches) {\n        document.body.classList.toggle(lightThemeClass);\n        theme = document.body.classList.contains(lightThemeClass) ? \"light\" : \"dark\";\n    } else {\n        document.body.classList.toggle(darkThemeClass);\n        theme = document.body.classList.contains(darkThemeClass) ? \"dark\" : \"light\";\n    }\n    localStorage.setItem(localStorageKeyTheme, theme);\n    themeToggleButton.textContent = `Theme: ${theme}`;\n});","import { solve, setOnSolutions } from \"./solver\";\nimport type { Solution } from \"./worker\";\nimport \"./theme\";\n\nlet solveBtn = document.getElementById(\"solveBtn\")!;\nlet outputList = document.getElementById(\"outputList\")!;\nlet loadingIndicator = document.getElementById(\"loadingIndicator\")!;\nlet errorMessage = document.getElementById(\"errorMessage\")!;\nlet statsMessage = document.getElementById(\"statsMessage\")!;\n\nlet inputTimeTable = document.getElementById(\"timeTable\") as HTMLTextAreaElement;\nlet inputNSolutions = document.getElementById(\"nSolutions\") as HTMLInputElement;\nlet inputMaxRestarts = document.getElementById(\"maxRestarts\") as HTMLInputElement;\nlet inputOnlyRequiredRestarts = document.getElementById(\"onlyRequiredRestarts\") as HTMLInputElement;\nlet inputRestartPenalty = document.getElementById(\"restartPenalty\") as HTMLInputElement;\n\ninputTimeTable.addEventListener(\"keypress\", (e) => {\n    if (e.key === \"Enter\" && e.ctrlKey) {\n        e.preventDefault();\n        solveBtn.click();\n    }\n});\n\nlet setSpinning = (active: boolean) => loadingIndicator.classList.toggle(\"disabled\", !active);\n\nfunction createSolutionLi(solution: Solution) {\n    let timeEl = document.createElement(\"span\");\n    timeEl.textContent = `${formatDuration(solution.time * 17, true)} (${solution.time}) with`;\n    let routeEl = document.createElement(\"code\");\n    routeEl.textContent = solution.route.join(\", \");\n\n    let li = document.createElement(\"li\");\n    li.className = \"newSolution\";\n    li.replaceChildren(timeEl, \" \", routeEl);\n\n    return li;\n}\n\n\nfunction truncateChildren(element: Element, length: number) {\n    while (element.childElementCount > length) {\n        element.removeChild(element.lastChild!);\n    }\n}\n\nfunction insertChildAt(parent: Element, child: Element, index: number) {\n    if (index >= parent.childElementCount) {\n        parent.appendChild(child);\n    } else {\n        outputList.insertBefore(child, parent.children[index]);\n    }\n\n}\n\nsetOnSolutions((solution, updatedIndex) => {\n    let nSolutions = Number(inputNSolutions.value);\n\n    let li = createSolutionLi(solution);\n    insertChildAt(outputList, li, updatedIndex);\n    truncateChildren(outputList, nSolutions);\n});\n\nfunction formatDuration(millis: number, alwaysIncludeMinutes?: boolean) {\n    let ms = millis % 1000;\n    millis = (millis - ms) / 1000;\n    let secs = millis % 60;\n    millis = (millis - secs) / 60;\n    let mins = millis % 60;\n    let hrs = (millis - mins) / 60;\n\n    let str = `${secs.toString().padStart(2, \"0\")}.${ms.toString().padStart(3, \"0\")}`;\n    if (alwaysIncludeMinutes || mins != 0) {\n        str = `${mins.toString().padStart(2, \"0\")}:${str}`;\n    }\n    if (hrs != 0) {\n        str = `${hrs.toString().padStart(2, \"0\")}:${str}`;\n    }\n\n    return str;\n}\n\nsolveBtn.addEventListener(\"click\", () => {\n    setSpinning(true);\n\n    outputList.replaceChildren();\n    statsMessage.textContent = \"\";\n    errorMessage.textContent = \"\";\n\n    let table = inputTimeTable.value;\n    let maxSolutions = Number(inputNSolutions.value);\n    let maxRestarts = inputMaxRestarts.value !== \"\" ? Number(inputMaxRestarts.value) : undefined;\n    let onlyRequiredRestarts = inputOnlyRequiredRestarts.checked;\n    // let restartPenalty = Number(inputRestartPenalty.value);\n    let restartPenalty = 190;\n\n    let start = Date.now();\n    solve({\n        table,\n        maxSolutions,\n        maxRestarts,\n        onlyRequiredRestarts,\n        restartPenalty,\n    })\n        .then(stats => {\n            let end = Date.now();\n\n            if (stats) {\n                let msg = `${stats.solutions} solutions found, ${stats.iterations} calls to pathfind function and ${stats.cutBranches} cut branches, in ${formatDuration(end - start, true)} `;\n                statsMessage.textContent = msg;\n            } else {\n                statsMessage.textContent = \"Code not fully loaded yet, try again later\";\n            }\n        })\n        .catch((error: Error) => {\n            errorMessage.textContent = `Error: ${error.message}`;\n            console.error(error);\n        })\n        .finally(() => {\n            setSpinning(false);\n        });\n});"],"names":["$4d92f81ca86817c4$var$onSolutionCallback","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$4d92f81ca86817c4$var$workerState","initialized","running","worker","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","self","location","source","stringify","URL","createObjectURL","Blob","type","$dbc446bb83a6385a$var$url","resolve","url","$dbc446bb83a6385a$exports","toString","$4d92f81ca86817c4$var$loadWorker","Worker","initMessage","eventType","Promise","reject","onerror","onmessageerror","onmessage","message","data","postMessage","$4d92f81ca86817c4$var$createInitializedWorker","then","addEventListener","e","$4d92f81ca86817c4$var$onError","$4d92f81ca86817c4$var$workerHandler","$4d92f81ca86817c4$var$onFinish","stats","solution","updatedIndex","error","console","timeEnd","$4d92f81ca86817c4$export$2865df1f26e73f8e","params","warn","undefined","terminate","time","$227f11a6809b1d6b$var$themeToggleButton","document","getElementById","$227f11a6809b1d6b$var$prefersDarkScheme","window","matchMedia","$227f11a6809b1d6b$var$localStorageKeyTheme","$227f11a6809b1d6b$var$darkThemeClass","$227f11a6809b1d6b$var$lightThemeClass","$227f11a6809b1d6b$var$currentTheme","localStorage","getItem","body","classList","toggle","matches","textContent","theme","contains","setItem","$b4e14b6b8da86996$var$solveBtn","$b4e14b6b8da86996$var$outputList","$b4e14b6b8da86996$var$loadingIndicator","$b4e14b6b8da86996$var$errorMessage","$b4e14b6b8da86996$var$statsMessage","$b4e14b6b8da86996$var$inputTimeTable","$b4e14b6b8da86996$var$inputNSolutions","$b4e14b6b8da86996$var$inputMaxRestarts","$b4e14b6b8da86996$var$inputOnlyRequiredRestarts","key","ctrlKey","preventDefault","click","$b4e14b6b8da86996$var$setSpinning","active","$b4e14b6b8da86996$var$formatDuration","millis","alwaysIncludeMinutes","ms","secs","mins","hrs","str","padStart","nSolutions","Number","value","li","timeEl","createElement","routeEl","route","join","className","replaceChildren","$b4e14b6b8da86996$var$createSolutionLi","parent","child","index","childElementCount","appendChild","insertBefore","children","element","removeChild","lastChild","$b4e14b6b8da86996$var$truncateChildren","table","maxSolutions","maxRestarts","onlyRequiredRestarts","checked","start","Date","now","end","msg","solutions","iterations","cutBranches","catch","finally"],"version":3,"file":"index.8ccc26c3.js.map"}